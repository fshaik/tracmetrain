// prerequisite: all classes must have been generated by GenTraining.java
// purpose: training to produce prediction model

import java.io.*;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;


public class Training {
	
	public  static void runSVMTraining(String trainDir, String trainFile) {
    	// run easy.py to train the given training file in the given training directory
    	// e.g., 
    	// trainDir = brunato_data.txt_dir/train_p0.5.txt_dir/X10/"
    	// trainFile = x_1.txt
    	// run command line:  ./easy.py brunato_data.txt_dir/train_p0.5.txt_dir/X10/1.txt
    	
    	try {
    		System.out.println("easy.py " + trainDir + trainFile);
    		Process pr = Runtime.getRuntime().exec("python easy.py " + trainDir + trainFile);
    		
    		BufferedReader input = new BufferedReader(new InputStreamReader(pr.getInputStream()));
    		 
    		FileOutputStream fOutStreamT = new FileOutputStream(trainDir + trainFile + ".log");
			DataOutputStream outputT = new DataOutputStream(fOutStreamT);
    		
    		
            String line=null;

            while((line=input.readLine()) != null) {
                //System.out.println(line);
                outputT.writeBytes(line + "\n");
            }
    		
    		pr.waitFor();
    		outputT.close();
    		
    		// after this execution, the  output files are saved in the current directory; need to move them to the same 
    		// directory with the training file; those files not needed are deleted
    		
    		new File(trainFile + ".model").renameTo(new File(trainDir + trainFile + ".model"));
    		new File(trainFile + ".range").renameTo(new File(trainDir + trainFile + ".range"));
    		
    		new File(trainFile + ".scale").delete();
    		//new File(trainFile + ".scale").renameTo(new File(trainDir + trainFile + ".scale"));
    		
    		new File(trainFile + ".scale.out").delete();
    		//new File(trainFile + ".scale.out").renameTo(new File(trainDir + trainFile + ".scale.out"));
    		
    		new File(trainFile + ".scale.png").delete();
    		//new File(trainFile + ".scale.png").renameTo(new File(trainDir + trainFile + ".scale.png"));
    	}
    	catch (Exception e) {
			e.printStackTrace();
			System.out.println("Failed runSVMTraining()");
			System.exit(-1);
		}
    }
    
    public  static void runSVMTrainingAllClasses(String dimension, String trainCollectionFile, int numClasses) {
    	// training all x-classes (or y-classes) for the case there are "numClasses" classes
    	// trainCollectionFile = file containing all training samples
    	// dimension: "X" or "Y" representing the X or Y dimension we are training for
    	// e.g. runSVMTrainingClasses("X", "train_p0.5.txt", 10)
    	
    	String trainDir = trainCollectionFile + "_dir/" + dimension + numClasses +"/";
    	
    	for (int i = 1; i <= numClasses; i++) {
    		runSVMTraining(trainDir, i +".txt");
     	}  	
    }
    
    
}

